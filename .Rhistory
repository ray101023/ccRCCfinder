hello <- function() {
print("Hello, world!")
}
hello()
train_ccRCC_stage <- read.csv("/raid/xidan/lyp/package/train_data_kidney.csv")
train_ccRCC_stage <- read.csv("/raid/xidan/lyp/package/train_data_kidney.csv",row.names = 1)
train_ccRCC_stage <- read.csv("/raid/xidan/lyp/package/train_data_kidney.csv",row.names = 1)
View(train_ccRCC_stage)
library(devtools)
use_r("pre_ccRCC_stage")
use_data(train_ccRCC_stage)
use_r("data")
library(ccRCCfinder)
devtools::load_all(".")
data("train_ccRCC_stage")
rm(train_ccRCC_stage)
data("train_ccRCC_stage")
View(train_ccRCC_stage)
train_ccRCC_stage <- read.csv("/raid/xidan/lyp/package/train_data_kidney.csv",row.names = 1,check.names = F)
View(train_ccRCC_stage)
use_data(train_ccRCC_stage)
use_data(train_ccRCC_stage,overwrite = T)
devtools::load_all(".")
rm(train_ccRCC_stage)
data("train_ccRCC_stage")
View(train_ccRCC_stage)
rm(train_ccRCC_stage)
data("train_ccRCC_stage")
library(caret)
library(caretEnsemble)
library(doParallel)
registerDoParallel(4)
getDoParWorkers()
set.seed(123)
my_control <- trainControl(method = "repeatedcv",             # for ???cross-validation???
number = 10,                # number of k-folds
repeats=3,
savePredictions = "final", # cbind
index = createResample(as.factor(train_group$type), 10),
#search = "random",
classProbs=TRUE,
allowParallel = TRUE)
marker_selection <- c("cg10290276","cg08662052","cg20801476","cg01097384","cg00891541","cg19364784","cg16836311",
"cg17105755","cg05732750","cg05222982","cg08602008","cg19890739","cg01345315","cg24720008","cg08782899","cg13319711",
"cg21002957","cg19165946","cg20192747","cg09257635","cg26333652","cg17128947","cg01206211","cg10556064","cg24152605",
"cg06529756","cg18428234","cg07195011","cg15959205","cg07565505","cg00510870","cg14451382","cg16486109","cg22239727",
"cg26549084","cg07247419","cg19915582","cg26115633","cg09442654","cg04051152","cg08981980","cg20079298","cg12187394",
"cg27549720","cg03125498","cg06516502","cg15990629","cg02018681","cg13475333","cg27629992","cg17665699","cg03318573",
"cg13954457","cg20996561","cg01348293","cg27663389","cg16247183","cg04066265","cg15676707","cg25968569","cg16834823",
"cg20285026","cg15439862","cg00031162","cg21503392")
data("train_ccRCC_stage")
library(caret)
library(caretEnsemble)
library(doParallel)
registerDoParallel(4)
getDoParWorkers()
set.seed(123)
train_group <- c(rep("N",160),rep("MT",60),rep("LT",106))
my_control <- trainControl(method = "repeatedcv",             # for ???cross-validation???
number = 10,                # number of k-folds
repeats=3,
savePredictions = "final", # cbind
index = createResample(as.factor(train_group$type), 10),
#search = "random",
classProbs=TRUE,
allowParallel = TRUE)
my_control <- trainControl(method = "repeatedcv",             # for ???cross-validation???
number = 10,                # number of k-folds
repeats=3,
savePredictions = "final", # cbind
index = createResample(as.factor(train_group), 10),
#search = "random",
classProbs=TRUE,
allowParallel = TRUE)
marker_selection <- c("cg10290276","cg08662052","cg20801476","cg01097384","cg00891541","cg19364784","cg16836311",
"cg17105755","cg05732750","cg05222982","cg08602008","cg19890739","cg01345315","cg24720008","cg08782899","cg13319711",
"cg21002957","cg19165946","cg20192747","cg09257635","cg26333652","cg17128947","cg01206211","cg10556064","cg24152605",
"cg06529756","cg18428234","cg07195011","cg15959205","cg07565505","cg00510870","cg14451382","cg16486109","cg22239727",
"cg26549084","cg07247419","cg19915582","cg26115633","cg09442654","cg04051152","cg08981980","cg20079298","cg12187394",
"cg27549720","cg03125498","cg06516502","cg15990629","cg02018681","cg13475333","cg27629992","cg17665699","cg03318573",
"cg13954457","cg20996561","cg01348293","cg27663389","cg16247183","cg04066265","cg15676707","cg25968569","cg16834823",
"cg20285026","cg15439862","cg00031162","cg21503392")
train_data <- train_ccRCC_stage[marker_selection,]
#train_group <- c(rep("N",160),rep("MT",60),rep("LT",106))
set.seed(917)
model_list <- caretList(x=t(as.matrix(train_data)),
y=as.factor(train_group$type),
trControl = my_control,
metric="Accuracy",
methodList = c("knn","rpart","lda"),  #lm
#               "xgbTree"),
tuneList=list(
rf=caretModelSpec(method="rf", tuneGrid=data.frame(.mtry=c(1:10))),
gbm=caretModelSpec(method="gbm", tuneGrid=data.frame(.interaction.depth = (1:5) * 2,
.n.trees = (1:10)*25,
.shrinkage = seq(.0005, .05,.0005),
.n.minobsinnode=c(5,10,15,20))),
svmRadial=caretModelSpec(method="svmRadial", tuneGrid=data.frame(.sigma = 10^(-1:4),
.C = 10^(0:5))),
nnet=caretModelSpec(method="nnet", tuneLength=2, trace=FALSE)),
continue_on_fail = FALSE)
#train_group <- c(rep("N",160),rep("MT",60),rep("LT",106))
set.seed(917)
model_list <- caretList(x=t(as.matrix(train_data)),
y=as.factor(train_group),
trControl = my_control,
metric="Accuracy",
methodList = c("knn","rpart","lda"),  #lm
#               "xgbTree"),
tuneList=list(
rf=caretModelSpec(method="rf", tuneGrid=data.frame(.mtry=c(1:10))),
gbm=caretModelSpec(method="gbm", tuneGrid=data.frame(.interaction.depth = (1:5) * 2,
.n.trees = (1:10)*25,
.shrinkage = seq(.0005, .05,.0005),
.n.minobsinnode=c(5,10,15,20))),
svmRadial=caretModelSpec(method="svmRadial", tuneGrid=data.frame(.sigma = 10^(-1:4),
.C = 10^(0:5))),
nnet=caretModelSpec(method="nnet", tuneLength=2, trace=FALSE)),
continue_on_fail = FALSE)
stackControl <- trainControl(method = "repeatedcv",number = 10,repeats = 3,savePredictions = TRUE,classProbs = TRUE)
set.seed(917)
stack.gbm <- caretStack(model_list, method='gbm',
metric="Accuracy",
trControl=stackControl)
print(stack.gbm)
results <- resamples(model_list)
dotplot(results)
modelCor(results)
summary(results)
pre_ccRCC_stage <- function(data,parallel=4){
data("train_ccRCC_stage")
library(caret)
library(caretEnsemble)
library(doParallel)
registerDoParallel(parallel)
getDoParWorkers()
set.seed(123)
train_group <- c(rep("N",160),rep("MT",60),rep("LT",106))
my_control <- trainControl(method = "repeatedcv",             # for ???cross-validation???
number = 10,                # number of k-folds
repeats=3,
savePredictions = "final", # cbind
index = createResample(as.factor(train_group), 10),
#search = "random",
classProbs=TRUE,
allowParallel = TRUE)
marker_selection <- c("cg10290276","cg08662052","cg20801476","cg01097384","cg00891541","cg19364784","cg16836311",
"cg17105755","cg05732750","cg05222982","cg08602008","cg19890739","cg01345315","cg24720008","cg08782899","cg13319711",
"cg21002957","cg19165946","cg20192747","cg09257635","cg26333652","cg17128947","cg01206211","cg10556064","cg24152605",
"cg06529756","cg18428234","cg07195011","cg15959205","cg07565505","cg00510870","cg14451382","cg16486109","cg22239727",
"cg26549084","cg07247419","cg19915582","cg26115633","cg09442654","cg04051152","cg08981980","cg20079298","cg12187394",
"cg27549720","cg03125498","cg06516502","cg15990629","cg02018681","cg13475333","cg27629992","cg17665699","cg03318573",
"cg13954457","cg20996561","cg01348293","cg27663389","cg16247183","cg04066265","cg15676707","cg25968569","cg16834823",
"cg20285026","cg15439862","cg00031162","cg21503392")
train_data <- train_ccRCC_stage[marker_selection,]
#train_group <- c(rep("N",160),rep("MT",60),rep("LT",106))
set.seed(917)
model_list <- caretList(x=t(as.matrix(train_data)),
y=as.factor(train_group),
trControl = my_control,
metric="Accuracy",
methodList = c("knn","rpart","lda"),  #lm
#               "xgbTree"),
tuneList=list(
rf=caretModelSpec(method="rf", tuneGrid=data.frame(.mtry=c(1:10))),
gbm=caretModelSpec(method="gbm", tuneGrid=data.frame(.interaction.depth = (1:5) * 2,
.n.trees = (1:10)*25,
.shrinkage = seq(.0005, .05,.0005),
.n.minobsinnode=c(5,10,15,20))),
svmRadial=caretModelSpec(method="svmRadial", tuneGrid=data.frame(.sigma = 10^(-1:4),
.C = 10^(0:5))),
nnet=caretModelSpec(method="nnet", tuneLength=2, trace=FALSE)),
continue_on_fail = FALSE)
stackControl <- trainControl(method = "repeatedcv",number = 10,repeats = 3,savePredictions = TRUE,classProbs = TRUE)
set.seed(917)
stack.gbm <- caretStack(model_list, method='gbm',
metric="Accuracy",
trControl=stackControl)
predict_test_data <- predict(stack.gbm,newdata=t(as.matrix(data[marker_selection,])),type="raw")
return(predict_test_data)
}
test_data <- read.csv("/raid/xidan/lyp/package/test_data.csv")
test_data <- read.csv("/raid/xidan/lyp/package/test_data.csv",row.names = 1, check.names = F)
View(test_data)
pre_test <- pre_ccRCC_stage(test_data,parallel = 40)
pre_test
?train_ccRCC_stage
devtools::load_all(".")
rm(list=ls())
devtools::load_all(".")
library(ccRCCfinder)
?pre_ccRCC
?pre_ccRCC_stafe
?pre_ccRCC_stage
?pre_ccRCC_stage
use_r()
use_r("pre_ccRCC_others")
train_ccRCC_others <- read.csv("/raid/xidan/lyp/package/train_ccRCC_other.csv",row.names = 1,check.names = F)
use_data(train_ccRCC_others)
View(train_ccRCC_others)
devtools::load_all(".")
data("train_ccRCC_others")
rm(list=ls())
gc()
data("train_ccRCC_others")
library(caret)
library(caretEnsemble)
library(doParallel)
registerDoParallel(parallel)
getDoParWorkers()
parallel=40
data("train_ccRCC_others")
library(caret)
library(caretEnsemble)
library(doParallel)
registerDoParallel(parallel)
getDoParWorkers()
set.seed(123)
train_group <- c(rep("ccRCC",323),rep("MT",1471))
my_control <- trainControl(method = "repeatedcv",             # for ???cross-validation???
number = 10,                # number of k-folds
repeats=3,
savePredictions = "final", # cbind
index = createResample(as.factor(train_group), 10),
#search = "random",
classProbs=TRUE,
allowParallel = TRUE)
marker_selection <- c("cg19364784",
"cg13475333",
"cg10290276",
"cg26549084",
"cg18428234",
"cg19890739",
"cg09442654",
"cg22239727",
"cg00031162",
"cg08662052",
"cg20285026")
train_data <- train_ccRCC_others[marker_selection,]
#train_group <- c(rep("N",160),rep("MT",60),rep("LT",106))
set.seed(917)
model_list <- caretList(x=t(as.matrix(train_data)),
y=as.factor(train_group),
trControl = my_control,
metric="Accuracy",
methodList = c("knn","rpart","lda"),  #lm
#               "xgbTree"),
tuneList=list(
rf=caretModelSpec(method="rf", tuneGrid=data.frame(.mtry=c(1:10))),
gbm=caretModelSpec(method="gbm", tuneGrid=data.frame(.interaction.depth = (1:5) * 2,
.n.trees = (1:10)*25,
.shrinkage = seq(.0005, .05,.0005),
.n.minobsinnode=c(5,10,15,20))),
svmRadial=caretModelSpec(method="svmRadial", tuneGrid=data.frame(.sigma = 10^(-1:4),
.C = 10^(0:5))),
nnet=caretModelSpec(method="nnet", tuneLength=2, trace=FALSE)),
continue_on_fail = FALSE)
stackControl <- trainControl(method = "repeatedcv",number = 10,repeats = 3,savePredictions = TRUE,classProbs = TRUE)
set.seed(917)
stack.gbm <- caretStack(model_list, method='gbm',
metric="Accuracy",
trControl=stackControl)
stac
stack.gbm
test_data <- read.csv("/raid/xidan/lyp/package/test_data.csv",row.names = 1,check.names = F)
predict_test_data <- predict(stack.gbm,newdata=t(as.matrix(test_data[marker_selection,])),type="raw")
predict_test_data
View(test_data)
test_data <- read.csv("/raid/xidan/lyp/package/test_ccRCC_other.csv",row.names = 1,check.names = F)
pre_test <- pre_ccRCC_others(test_data,parallel = 4)
pre_test
library(ccRCCfinder)
detach("package:ccRCCfinder", unload = TRUE)
remove.packages("ccRCCfinder", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
ll
library(ccRCCfinder)
remove.packages("ccRCCfinder", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
install.packages("/raid/xidan/lyp/package/ccRCCfinder_1.0.0.1.tar.gz", repos = NULL, type = "source")
library(ccRCCfinder)
data("data/train_ccRCC_stage.rda")
data("data/train_ccRCC_stage")
data("train_ccRCC_stage")
force(train_ccRCC_stage)
rm(train_ccRCC_stage)
rm(train_ccRCC_others)
gc()
devtools::load_all(".")
library(devtools)
load("/raid/xidan/lyp/package/ccRCCfinder/data/train_ccRCC_others.rda")
rm(list = ls())
gc()
data("train_ccRCC_others")
use_r("β_to_M")
use_r("B_to_M")
log2(1+0.001/(2-0.001))
log2((1+0.001)/(2-0.001))
library(ccRCCfinder)
library(ccRCCfinder)
B_to_M(3)
B_to_M(0.2)
0.9
B_to_M(0.9)
